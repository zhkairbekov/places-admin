const express = require('express');
const { validationResult } = require('express-validator');
const { loginValidation } = require('../middleware/validation');
const router = express.Router();

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
router.post('/login', loginValidation, async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        const { username, password } = req.body;
        const adminUser = process.env.ADMIN_USER;
        const adminPass = process.env.ADMIN_PASS;

        if (username === adminUser && password === adminPass) {
            req.session.authenticated = true;
            req.session.user = username;

            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);

            res.json({
                success: true,
                message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
                user: username
            });
        } else {
            console.log('‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', username);
            res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
router.get('/check', (req, res) => {
    const isAuthenticated = req.session.authenticated && req.session.user === process.env.ADMIN_USER;

    res.json({
        authenticated: isAuthenticated,
        user: isAuthenticated ? req.session.user : null
    });
});

// –í—ã—Ö–æ–¥ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
router.post('/logout', (req, res) => {
    const userName = req.session.user;

    req.session.destroy((err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', err);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
        }

        // –û—á–∏—â–∞–µ–º cookie —Å–µ—Å—Å–∏–∏
        res.clearCookie('connect.sid');

        console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª:', userName);

        res.json({
            success: true,
            message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥',
            redirect: '/'
        });
    });
});

module.exports = router;