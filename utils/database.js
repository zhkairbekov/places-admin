const fs = require('fs').promises;
const path = require('path');

const dataPath = path.join(__dirname, '..', 'data', 'places.json');
const backupPath = path.join(__dirname, '..', 'data', 'backup');

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
async function createBackup() {
    try {
        const data = await fs.readFile(dataPath, 'utf8');
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupFile = path.join(backupPath, `places-${timestamp}.json`);
        
        await fs.mkdir(backupPath, { recursive: true });
        await fs.writeFile(backupFile, data);
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${path.basename(backupFile)}`);
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        await cleanupOldBackups();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    }
}

// –û—á–∏—Å—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤ —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π
async function cleanupOldBackups() {
    try {
        const files = await fs.readdir(backupPath);
        const now = new Date();
        const daysToKeep = 14;
        const cutoffTime = now.getTime() - (daysToKeep * 24 * 60 * 60 * 1000);
        
        let deletedCount = 0;
        
        for (const file of files) {
            if (file.startsWith('places-') && file.endsWith('.json')) {
                const filePath = path.join(backupPath, file);
                const stats = await fs.stat(filePath);
                const fileTime = stats.mtime.getTime();
                
                if (fileTime < cutoffTime) {
                    await fs.unlink(filePath);
                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: ${file}`);
                    deletedCount++;
                }
            }
        }
        
        if (deletedCount > 0) {
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: ${deletedCount}`);
        }
        
    } catch (error) {
        // –ï—Å–ª–∏ –ø–∞–ø–∫–∞ backup –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if (error.code !== 'ENOENT') {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤:', error);
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadPlaces() {
    try {
        await fs.mkdir(path.dirname(dataPath), { recursive: true });
        const data = await fs.readFile(dataPath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.log('üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π...');
        const initialData = { places: [] };
        await fs.writeFile(dataPath, JSON.stringify(initialData, null, 2));
        return initialData;
    }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function cleanData(data) {
    const cleaned = { ...data };
    Object.keys(cleaned).forEach(key => {
        if (cleaned[key] === undefined || cleaned[key] === null || cleaned[key] === '') {
            delete cleaned[key];
        }
    });
    return cleaned;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function savePlaces(data) {
    await createBackup(); // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    await fs.writeFile(dataPath, JSON.stringify(data, null, 2));
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
async function forceCleanup() {
    console.log('üßπ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...');
    await cleanupOldBackups();
}

module.exports = { 
    loadPlaces, 
    savePlaces, 
    cleanData, 
    cleanupOldBackups,
    forceCleanup 
};