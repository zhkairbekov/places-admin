const fs = require('fs').promises;
const path = require('path');

const dataPath = path.join(__dirname, '..', 'data', 'places.json');
const backupPath = path.join(__dirname, '..', 'data', 'backup');

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
async function createBackup() {
    try {
        const data = await fs.readFile(dataPath, 'utf8');
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupFile = path.join(backupPath, `places-${timestamp}.json`);

        await fs.mkdir(backupPath, { recursive: true });
        await fs.writeFile(backupFile, data);

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${path.basename(backupFile)}`);

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        await cleanupOldBackups();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    }
}

// –û—á–∏—Å—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤ —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π
async function cleanupOldBackups() {
    try {
        const files = await fs.readdir(backupPath);
        const now = new Date();
        const daysToKeep = 14;
        const cutoffTime = now.getTime() - (daysToKeep * 24 * 60 * 60 * 1000);

        let deletedCount = 0;

        for (const file of files) {
            if (file.startsWith('places-') && file.endsWith('.json')) {
                const filePath = path.join(backupPath, file);
                const stats = await fs.stat(filePath);
                const fileTime = stats.mtime.getTime();

                if (fileTime < cutoffTime) {
                    await fs.unlink(filePath);
                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: ${file}`);
                    deletedCount++;
                }
            }
        }

        if (deletedCount > 0) {
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: ${deletedCount}`);
        }

    } catch (error) {
        if (error.code !== 'ENOENT') {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤:', error);
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
async function getBackupsList() {
    try {
        await fs.mkdir(backupPath, { recursive: true });
        const files = await fs.readdir(backupPath);

        const backups = [];

        for (const file of files) {
            if (file.startsWith('places-') && file.endsWith('.json')) {
                const filePath = path.join(backupPath, file);
                const stats = await fs.stat(filePath);

                // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                const dateStr = file.replace('places-', '').replace('.json', '');
                const date = new Date(dateStr.replace(/(\d{4})-(\d{2})-(\d{2})T(\d{2})-(\d{2})-(\d{2})-(\d{3})Z/, '$1-$2-$3T$4:$5:$6.$7Z'));

                backups.push({
                    filename: file,
                    path: filePath,
                    size: stats.size,
                    created: date,
                    formattedDate: date.toLocaleString('ru-RU')
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        return backups.sort((a, b) => b.created - a.created);

    } catch (error) {
        if (error.code === 'ENOENT') {
            return [];
        }
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
async function getBackupContent(filename) {
    try {
        const filePath = path.join(backupPath, filename);
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±—ç–∫–∞–ø–∞:', error);
        throw error;
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
async function restoreFromBackup(filename) {
    try {
        const backupData = await getBackupContent(filename);

        // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await createBackup();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await fs.writeFile(dataPath, JSON.stringify(backupData, null, 2));

        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –±—ç–∫–∞–ø–∞: ${filename}`);
        return backupData;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞:', error);
        throw error;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
async function deleteBackup(filename) {
    try {
        const filePath = path.join(backupPath, filename);
        await fs.unlink(filePath);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –±—ç–∫–∞–ø: ${filename}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞:', error);
        throw error;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadPlaces() {
    try {
        await fs.mkdir(path.dirname(dataPath), { recursive: true });
        const data = await fs.readFile(dataPath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.log('üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π...');
        const initialData = { places: [] };
        await fs.writeFile(dataPath, JSON.stringify(initialData, null, 2));
        return initialData;
    }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function cleanData(data) {
    const cleaned = { ...data };
    Object.keys(cleaned).forEach(key => {
        if (cleaned[key] === undefined || cleaned[key] === null || cleaned[key] === '') {
            delete cleaned[key];
        }
    });
    return cleaned;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function savePlaces(data) {
    await createBackup();
    await fs.writeFile(dataPath, JSON.stringify(data, null, 2));
}

module.exports = {
    loadPlaces,
    savePlaces,
    cleanData,
    cleanupOldBackups,
    getBackupsList,
    getBackupContent,
    restoreFromBackup,
    deleteBackup
};