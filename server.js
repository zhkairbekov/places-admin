require('dotenv').config();

const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const middleware = require('./config/middleware');
const authRoutes = require('./routes/auth');
const placesRoutes = require('./routes/places');
const pagesRoutes = require('./routes/pages');
const uploadRoutes = require('./routes/upload');
const mediaRoutes = require('./routes/media'); // ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
const { cleanupOldBackups } = require('./utils/database');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
middleware.setupMiddleware(app);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.use('/api/auth', authRoutes);
app.use('/api/places', placesRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api/media', mediaRoutes); // ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
app.use('/', pagesRoutes);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
async function initializeServer() {
    try {
        console.log('üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...');
        await cleanupOldBackups();
        
        setInterval(async () => {
            console.log('üïí –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤...');
            await cleanupOldBackups();
        }, 24 * 60 * 60 * 1000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üîê –ê–¥–º–∏–Ω login: ${process.env.ADMIN_USER}`);
    console.log(`üîê –ê–¥–º–∏–Ω password: ${process.env.ADMIN_PASS}`);
    console.log(`üñºÔ∏è –ú–µ–¥–∏–∞—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ /media-library`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    try {
        const fs = require('fs').promises;
        await fs.mkdir('images', { recursive: true });
        await fs.mkdir('data', { recursive: true });
        await fs.mkdir('data/backup', { recursive: true });
        console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
    }
    
    await initializeServer();
});